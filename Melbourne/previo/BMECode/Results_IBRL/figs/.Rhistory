df2 = df2[order(df2$contador, df2$fecha),]
dfsub = df2[df2$contador %in% levels(df2$contador)[1:8],]
dfsub$contador = factor(dfsub$contador)
tapply(dfsub$medicion, dfsub$contador, summary)
tapply(dfsub$medicion, dfsub$contador, length)
df3 = df2[which(diff(df2$medicion)!=0),]
n = as.numeric((round(max(df3$fecha)- min(df3$fecha)))*2) #al menos 2 observaciones por día por contador
#df3 = setDT(df3)[, medicion[.N >= n], by = contador]
#require(dplyr)
#df3 = df3 %>% group_by(contador) %>% filter(n() >= n)
df3 <- df3[!(as.numeric(df3$contador) %in% which(table(df3$contador)<n)),]
df3$contador = factor(df3$contador)
x = tapply(df3$medicion, df3$contador, diff)
my_difftime = function(x, units="mins") {
div = c("secs"=1, "mins"=60, "hours"=3600)
if(is.na(match(units, names(div)))) {
stop('Please specify either units as either "secs", "mins", or "hours"')
} else {
x = diff(as.numeric(x))/div[match(units, names(div))]
as.difftime(x, units=units)
}
}
y = tapply(df3$fecha, df3$contador, my_difftime, units="mins")
tb = tapply(df3$medicion, df3$contador, length)
tbF = tb[which(as.numeric(tb)!=1)]
contador = names(tbF)
nobs = as.numeric(tbF)
contadores = rep(contador, nobs-1)
hist(tapply(df3$medicion, df3$contador, length))
summary(tapply(df3$medicion, df3$contador, length))
boxplot(tapply(df3$medicion, df3$contador, length))
df4 = data.frame(contador = contadores, consumo = unlist(x), tiempo = unlist(y))
df4$consPorMin = df4$consumo/df4$tiempo
# hay que mezclar las observaciones de df4 con las que tengan el tiempo (fecha) bien.
dfaux = df3[df3$contador %in% names(tbF),]
library(data.table)
d1 = df3
d1$grp = d1$fecha
x = round(d1$grp, "min")
d1$grp = as.POSIXct(as.numeric(x), origin="1970-01-01",tz="CET")
#A df4 le falta 1 valor para llegar a tener los mismos que d1 por lo de substraer --> metemos un NA al final de cada nivel de contadoe
df_new <- as.data.frame(lapply(df4, as.character), stringsAsFactors = FALSE)
foo = do.call(rbind, by(df_new, df4$contador, rbind, NA))
library(zoo)
foo$contador = na.locf(foo$contador, fromLast = F)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
foo$contador = as.numeric(foo$contador)
d1$contador = as.numeric.factor(d1$contador)
foo = foo[order(foo$contador),]
d1 = d1[order(d1$contador),]
d1n = data.frame(d1)
dx = d1n[ c("contador", "grp")]
# Finalmente, dx tiene los mismos elementos que df4
foo2 = foo[c("consPorMin")]
d2 = cbind(foo2, dx)
foo3 = data.frame(cbind(d1, foo))
#foo4 = transform(foo3, consPorMin = c(NA, consPorMin[-nrow(foo3)]))
tail(df3)
tail(foo3)
foo5 = na.omit(foo3[c("contador", "grp", "consPorMin")])
#foo5$contador = as.numeric.factor(foo5$contador)
# the desired dates by
#https://stackoverflow.com/questions/40227494/how-to-fill-in-missing-dates-in-range-by-group
dt <- as.data.table(foo5)
seq_date <- function(x) seq(min(x), max(x), by = "mins")
tr2 = dt[, list(grp = seq_date(grp)), by = contador]
tr2$grp = as.numeric(tr2$grp)
foo5$grp = as.numeric(foo5$grp)
tr2 = data.table(tr2, key = c("contador", "grp"))
foo5 = data.table(foo5, key = c("contador", "grp"))
mg =merge(foo5, tr2, by = c("grp", "contador"), all.y=T)
mg2 = mg[order(mg$contador),]
mg2$grp = as.POSIXct(mg2$grp, origin="1970-01-01",tz="CET")
mg2$consPorMin = na.locf(mg2$consPorMin, fromLast = F)
library("lubridate")
difT = difftime(max(mg2$grp),min(mg2$grp),units="mins")
m = round(as.numeric(difT)/ mean(table(df4$contador)))
v = 1:1110
m=240
k = round((1-round(length(v)/m,10) %% 1)*m)  # número de medidas a añadir
if(k < m/3){
v = c(v,rep(x = v[length(v)],times = k)) #si hay que añadir menos que un tercio de lo que miden los intervalos lo hacemos
}else{
#si hay que añadir más de un tercio del intervalo borramos lo sobrante
nsobrante = length(v)%%m
v = v[(length(v)-nsobrante)]
}
unname(tapply(v, (seq_along(v)-1) %/% m, sum))
d3 = mg2[mg2$contador==6,]
head(d3)
str(d3)
d3$consPorMin = as.numeric(d3$consPorMin)
d3 = mg2[mg2$contador %in% c(7,7,8,9,10),]
tail(d3)
d3 = mg2[mg2$contador %in% c(6,7,8,9,10),]
d3 = mg2[mg2$contador %in% c(6,7,8,9,10),]
d3$consPorMin = as.numeric(d3$consPorMin)
by(d3, d3[,"contador"],
function(x) nrow(x))
table(mg2$contador)
d3 = mg2[mg2$contador %in% c(6,7,16),]
d3$consPorMin = as.numeric(d3$consPorMin)
d3
by(d3, d3[,"contador"],
function(x) nrow(x))
?apply
apply(d3, d3[,"contador"],
function(x) nrow(x))
apply(d3, "contador",
function(x) nrow(x))
by(d3, d3[,"contador"], function(x,m) nrow(x)+m)
m
by(d3, d3[,"contador"], function(x,m=5) nrow(x)+m)
by(d3, d3[,"contador"], function(x,m=5) nrow(x))
by(d3, d3[,"contador"], function(x,m=5) nrow(x)+m)
by(mg2, mg2[,"contador"], function(x,m=5) nrow(x)+m)
i = rnorm(4e6)
names(i) = as.integer(rnorm(1e6))
i = i[order(names(i))]
i
i
i
str(i)
names(i)
tapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m)
library("fastmatch")
system.time(tapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m))
system.time(ctapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m))
ctapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m)
length8levels(mg2$contador)
length(levels(mg2$contador))
length(levels(factor(mg2$contador)))
system.time(by(d3, d3[,"contador"], function(x,m=5) nrow(x)+m))
system.time(tapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m))
system.time(ctapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m))
system.time(by(d3, d3[,"contador"], function(x,m=5) nrow(x)+m))
system.time(tapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m))
system.time(ctapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m))
mg2$contador[1:1000]
mg2$contador[1000:3000]
mg2$contador[7000:13000]
mg2$contador[7000:18000]
mg2$contador[7000:28000]
mg2$contador[7000:68000]
mg2$contador[7000:108000]
mg2$contador[7000:408000]
mg2$contador[408000]
d3 = mg2[mg2$contador %in% c(6,7,16,32,603),]
d3$consPorMin = as.numeric(d3$consPorMin)
system.time(by(d3, d3[,"contador"], function(x,m=5) nrow(x)+m))
system.time(tapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m))
system.time(ctapply(d3$consPorMin, d3$contador, function(x,m=5) length(x)+m))
ctapply(d3$consPorMin, d3$contador, function(x,m=5){ length(x)+m})
m = 236
M=round(m/30)*30 # el valor más cercano para que hagamos trozos de medias horas
ctapply(d3$consPorMin, d3$contador, function(x,m=M){ length(x)+m})
ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(length(x))/M,10) %% 1)*M)
return(k)
})
M
1561/240
round(1561/240,10)
round(1561/240,10)%%1
(round(1561/240,10)%%1)*M
ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(x)/M,10) %% 1)*M)
return(k)
})
(round(1561/240,10)%%1)*M
(round(1561/240,10)%%1)
1-(round(1561/240,10)%%1)
(1-(round(1561/240,10)%%1))*M
(1-(round(1261/240,10)%%1))*M
(1-(round(22811/240,10)%%1))*M
(1-(round(2281/240,10)%%1))*M
(1-(round(1561/240,10)%%1))*M
2281/249
2281/240
1561/240
m = 236
M=round(m/30)*30 # el valor más cercano para que hagamos trozos de medias horas
ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(x)/M,10) %% 1)*M)
return(k)
})
ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(x)/M,10) %% 1)*M)
return(length(x))
})
M
1321/M
1021/M
2041+/M
2041/M
1081/M
1081/M
round(1081/M,10)
1-round(1081/M,10)
round(1081/M,10)
round(1081/M,10)%%1
1-round(1081/M,10)%%1
(1-round(1081/M,10)%%1)*M
(1-round(1321/M,10)%%1)*M
round(1321/M,10)%%1
round(1081/M,10)
round(1081/M,10)%%1
1321/M
1081/M
ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(x)/M,10) %% 1)*M)
return(k)
})
nsobrante = length(x)%%M
nsobrante
length(valu)
length(value)
m = 236
M=round(m/30)*30 # el valor más cercano para que hagamos trozos de medias horas
ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(x)/M,10) %% 1)*M)
if(k < M/3){
value = rep(x = x[length(x)],times = k)
x = c(x,value)
}else{
nsobrante = length(x)%%M
x = x[-c((length(x)-nsobrante):length(x)),]
#si hay que añadir más de un tercio del intervalo borramos lo sobrante
}
return(x)
})
x = d3[d3$contador==6,]
x
x = d3[d3$contador==6,"consPorMin"]
x
k = round((1-round(length(x)/M,10) %% 1)*M)
k = round((1-round(length(x)/M,10) %% 1)*M)
k
k < M/3
nsobrante = length(x)%%M
nsobrante
length()
length(x)
x
x = d3$consPorMin
x
x = d3[d3$contador==6,"consPorMin"]
x = as.numeric(d3[d3$contador==6,"consPorMin"])
x = as.numeric(d3[d3$contador==6,]$consPorMin)
x
length(x)
k = round((1-round(length(x)/M,10) %% 1)*M)
k
k < M/3
nsobrante = length(x)%%M
nsobrante
(length(x)-nsobrante):length(x)
x[-c((length(x)-nsobrante):length(x)),]
x[length(x)]
x[(length(x)-nsobrante):length(x),]
length(x)-nsobrante):length(x)
(length(x)-nsobrante):length(x)
length(x)
x = x[-c((length(x)-nsobrante):length(x))]
x
m = 236
M=round(m/30)*30 # el valor más cercano para que hagamos trozos de medias horas
ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(x)/M,10) %% 1)*M)
if(k < M/3){
value = rep(x = x[length(x)],times = k)
x = c(x,value)
}else{
nsobrante = length(x)%%M
x = x[-c((length(x)-nsobrante):length(x))]
#si hay que añadir más de un tercio del intervalo borramos lo sobrante
}
return(x)
})
m = 236
M=round(m/30)*30 # el valor más cercano para que hagamos trozos de medias horas
res = ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(x)/M,10) %% 1)*M)
if(k < M/3){
value = rep(x = x[length(x)],times = k)
x = c(x,value)
}else{
nsobrante = length(x)%%M
x = x[-c((length(x)-nsobrante):length(x))]
#si hay que añadir más de un tercio del intervalo borramos lo sobrante
}
return(x)
})
str(res)
res
res[1]
res[2]
length(d3)
nrow(d3)
res = ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(x)/M,10) %% 1)*M)
if(k < M/3){
value = rep(x = x[length(x)],times = k)
x = c(x,value)
}else{
nsobrante = length(x)%%M
x = x[-c((length(x)-nsobrante):length(x))]
#si hay que añadir más de un tercio del intervalo borramos lo sobrante
}
return(length(x))
})
res
str(rest)
str(res)
res = ctapply(d3$consPorMin, d3$contador,
function(x,m=M){
k = round((1-round(length(x)/M,10) %% 1)*M)
if(k < M/3){
value = rep(x = x[length(x)],times = k)
x = c(x,value)
}else{
nsobrante = length(x)%%M
x = x[-c((length(x)-nsobrante):length(x))]
#si hay que añadir más de un tercio del intervalo borramos lo sobrante
}
return(list(x, length(x)))
})
res
res[1]
res[2]
res[3]
res[4]
res[5]
res[[1]]
res[[2]]
res[[3]]
res[[4]]
res[[5]]
res[[6]]
res[[7]]
res[[8]]
View(res)
df <- read.table("../hardBME2.csv", sep=",", head=F)
setwd("~/Git_repos/posgradoActual/Melbourne/BMECode/Results_IBRL/figs")
df <- read.table("../hardBME2.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
df = df[1:84,]
head(df)
df2 = read.table("../hardPMF22res.csv", sep=",", head=F)
head(df)
head(df2)
df <- read.table("hardUseCase1.csv", sep=",", head=F)
head(df)
tail(df)
View(df)
df = df[1:73,]
head(df)
1:nrow(df)
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df))
)
axis(1, at = seq(1,85,3))
with(df, lines(loess.smooth(V1, RMSE),col = "#006600", lwd=2.5))
with(df, lines(loess.smooth(1:nrow(df), V1),col = "#006600", lwd=2.5))
nrow(df)
points(1:nrow(df),df$V2 , col="red", pch = 18, xaxt="n")
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df))
)
axis(1, at = seq(1,85,3))
with(df, lines(loess.smooth(1:nrow(df), V1),col = "#006600", lwd=2.5))
points(1:nrow(df),df$V2 , col="red", pch = 18, xaxt="n")
with(df, lines(loess.smooth(1:nrow(df), V2),col = "red", lwd=2.5))
legend("topleft", legend=c("PMF (#cl = 10)", "BME (#hs= 6)"),
col=c("red", "#00994C"), lty = 1, cex=1, lwd=2)
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df), cex=1.5)
)
df <- read.table("hardUseCase1.csv", sep=",", head=F)
df = df[1:73,]
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df), cex=1.5)
)
df <- read.table("hardUseCase1.csv", sep=",", head=F)
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data", cex=1.5#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df))
)
axis(1, at = seq(1,85,3))
with(df, lines(loess.smooth(1:nrow(df), V1),col = "#006600", lwd=2.5))
df <- read.table("hardUseCase1.csv", sep=",", head=F)
df = df[1:73,]
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df))
)
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data", cex=1.5#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df))
)
axis(1, at = seq(1,85,3))
with(df, lines(loess.smooth(1:nrow(df), V1),col = "#006600", lwd=2.5))
points(1:nrow(df),df$V2 , col="red", pch = 18, xaxt="n", cex=1.5)
with(df, lines(loess.smooth(1:nrow(df), V2),col = "red", lwd=2.5))
legend("topright", legend=c("PMF (#cl = 10)", "BME (#hs= 6)"),
col=c("red", "#00994C"), lty = 1, cex=1, lwd=2)
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data", cex=1.5#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df))
)
axis(1, at = seq(1,85,3))
with(df, lines(loess.smooth(1:nrow(df), V1),col = "#006600", lwd=2.5))
points(1:nrow(df),df$V2 , col="red", pch = 18, xaxt="n", cex=1.5)
with(df, lines(loess.smooth(1:nrow(df), V2),col = "red", lwd=2.5))
legend("topright", legend=c("PMF (#cl = 10)", "BME (#hs= 6)"),
col=c("red", "#00994C"), lty = 1, cex=1.5, lwd=2)
max(df$V2)
which(max(df$V2))
which.max(df$V2)
df$V2[which.max(df$V2)]
df <- read.table("hardUseCase1.csv", sep=",", head=F)
df = df[1:73,]
df$V2[which.max(df$V2)] = df$V2[which.max(df$V2)-1]
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data", cex=1.5#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df))
)
axis(1, at = seq(1,85,3))
with(df, lines(loess.smooth(1:nrow(df), V1),col = "#006600", lwd=2.5))
points(1:nrow(df),df$V2 , col="red", pch = 18, xaxt="n", cex=1.5)
with(df, lines(loess.smooth(1:nrow(df), V2),col = "red", lwd=2.5))
legend("topright", legend=c("PMF (#cl = 10)", "BME (#hs= 6)"),
col=c("red", "#00994C"), lty = 1, cex=1.5, lwd=2)
dev.off()
svg(filename="figUsecase1.svg", width = 12, height = 8, pointsize = 12)
plot(1:nrow(df), df$V1,ylab ="seconds", xlab ="Percentage of missing values"
, main="Hard sensors temp IBRL data", cex=1.5#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(df), max(df))
)
axis(1, at = seq(1,85,3))
with(df, lines(loess.smooth(1:nrow(df), V1),col = "#006600", lwd=2.5))
points(1:nrow(df),df$V2 , col="red", pch = 18, xaxt="n", cex=1.5)
with(df, lines(loess.smooth(1:nrow(df), V2),col = "red", lwd=2.5))
legend("topright", legend=c("PMF (#cl = 10)", "BME (#hs= 6)"),
col=c("red", "#00994C"), lty = 1, cex=1.5, lwd=2)
dev.off()
setwd("~/Git_repos/posgradoActual/Melbourne/BMECode/Results_IBRL/figs")
pmf = read.table("softPMF2nowFinalDeltas.csv",sep=",")
bme = read.table("softBME2nowFinalDeltas.csv", sep=",")
plot(1:nrow(bme), bme$V1, ylab ="RMSE", xlab ="delta"
, main="Hard & soft temp IBRL data, 10% missing"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(bme$V1, pmf$V1), max(bme$V1, pmf$V1))
)
axis(1, at = seq(1,20,1), labels = seq(0.1,2,0.1))
with(bme, lines(loess.smooth(1:nrow(bme), V1),col = "#006600", lwd=2.5))
points(1:nrow(pmf),pmf$V1 , col="red", pch = 18, xaxt="n")
with(pmf, lines(loess.smooth(1:nrow(pmf), V1),col = "red", lwd=2.5))
legend("topleft", legend=c("PMF (#cl = 10)", "BME (#hs= 3, #ss = 2)"),
col=c("red", "#00994C"), lty = 1, cex=1, lwd=2)
plot(1:nrow(bme), bme$V1, ylab ="RMSE", xlab ="delta"
, main="Soft humidity Docklands data, 10% missing"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(bme$V1, pmf$V1), max(bme$V1, pmf$V1))
)
seq(3,10,0.5)
length(seq(3,10,0.5))
axis(1, at = seq(1,15,1), labels = seq(3,10,0.5))
plot(1:nrow(bme), bme$V1, ylab ="RMSE", xlab ="delta"
, main="Soft humidity Docklands data, 10% missing"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, xaxt="n", ylim = c(min(bme$V1, pmf$V1), max(bme$V1, pmf$V1))
)
axis(1, at = seq(1,15,1), labels = seq(3,10,0.5))
with(bme, lines(loess.smooth(1:nrow(bme), V1),col = "#006600", lwd=2.5))
points(1:nrow(pmf),pmf$V1 , col="red", pch = 18, xaxt="n")
with(pmf, lines(loess.smooth(1:nrow(pmf), V1),col = "red", lwd=2.5))
legend("topleft", legend=c("PMF", "BME (#hs= 3, #ss = 2)"),
col=c("red", "#00994C"), lty = 1, cex=1, lwd=2)
plot(1:nrow(bme), bme$V1, ylab ="RMSE", xlab ="delta"
, main="Soft humidity Docklands data, 10% missing"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, cex=1.5, xaxt="n", ylim = c(min(bme$V1, pmf$V1), max(bme$V1, pmf$V1))
)
axis(1, at = seq(1,15,1), labels = seq(3,10,0.5))
with(bme, lines(loess.smooth(1:nrow(bme), V1),col = "#006600", lwd=2.5))
points(1:nrow(pmf),pmf$V1, cex=1.5 , col="red", pch = 18, xaxt="n")
with(pmf, lines(loess.smooth(1:nrow(pmf), V1),col = "red", lwd=2.5))
legend("topleft", legend=c("PMF", "BME (#ss = 3)"),
col=c("red", "#00994C"), lty = 1, cex=1.5, lwd=2)
dev.off()
svg(filename="figdelta2.svg", width = 12, height = 8, pointsize = 12)
plot(1:nrow(bme), bme$V1, ylab ="RMSE", xlab ="delta"
, main="Soft humidity Docklands data, 10% missing"#, ylim = c(4.003,4.027)
, col="#00994C", pch = 19, cex=1.5, xaxt="n", ylim = c(min(bme$V1, pmf$V1), max(bme$V1, pmf$V1))
)
axis(1, at = seq(1,15,1), labels = seq(3,10,0.5))
with(bme, lines(loess.smooth(1:nrow(bme), V1),col = "#006600", lwd=2.5))
points(1:nrow(pmf),pmf$V1, cex=1.5 , col="red", pch = 18, xaxt="n")
with(pmf, lines(loess.smooth(1:nrow(pmf), V1),col = "red", lwd=2.5))
legend("topleft", legend=c("PMF", "BME (#ss = 3)"),
col=c("red", "#00994C"), lty = 1, cex=1.5, lwd=2)
dev.off()
