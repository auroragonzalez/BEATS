library("RSQLServer")
install.packages("RSQLServer")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library("rJava")
install.packages("RSQLServer")
library("RSQLServer")
install.packages("rJava")
library("rJava")
library("rJava")
install.packages("rJava")
library("rJava")
library("rJava")
install.packages("rJava")
library("rJava")
library("rJava")
library("RSQLServer")
con <- DBI::dbConnect(RSQLServer::SQLServer(), server = '127.0.0.1', port = '1433', database = 'PREBYA_2017_Balsa', properties = list(user = 'aurora', password = 'aurora123'))
con
dbListTables(con)
dbListTables(con)
dbGetQuery(con, 'select * from tbl_measurepoint')
library("DBI")
dbGetQuery(con, 'select * from tbl_measurepoint')
dbGetQuery(con, 'select * from tbl_measurepoint')
df = dbGetQuery(con, 'select * from tbl_measurepoint')
dim(df)
dbListTables(con)
con <- DBI::dbConnect(RSQLServer::SQLServer(), server = '127.0.0.1', port = '1433', database = 'PREBYA_2017_Balsa', properties = list(user = 'aurora', password = 'aurora123'))
dbListTables(con)
library("DBI")
df = dbGetQuery(con, 'select * from tbl_measurepoint')
head(df)
df$name
dbListTables(con)
d1 = dbGetQuery(con, 'select * from tbl_additional_frequencies')
library("RSQLServer")
con <- DBI::dbConnect(RSQLServer::SQLServer(), server = '127.0.0.1', port = '1433', database = 'PREBYA_2017_Balsa', properties = list(user = 'aurora', password = 'aurora123'))
dbListTables(con)
library("DBI")
df = dbGetQuery(con, 'select * from tbl_measurepoint')
d1 = dbGetQuery(con, 'select * from tbl_additional_frequencies')
d1 = dbGetQuery(con, 'select * from tbl_additional_frequencies')
dbListTables(con)
df = dbGetQuery(con, 'select * from tbl_additional_frequencies')
dbListTables(con)[1:3]
d1 = dbGetQuery(con, 'select * from tbl_balancing_data')
df = dbGetQuery(con, 'select * from tbl_measurepoint')
d1 = dbGetQuery(con, 'select * from tbl_balancing_plane')
dbListTables(con)[4]
d1 = dbGetQuery(con, 'select * from tbl_balancing_sensor')
dbListTables(con)[5]
d1 = dbGetQuery(con, 'select * from tbl_users')
d1 = dbGetQuery(con, 'select * from tbl_unit_list')
d1
head(d1)
tablas = dbListTables(con)
i=43
print( tablas[i])
dim(dbGetQuery(con, paste0('select *',tablas[i],"'")))
dim(dbGetQuery(con, paste0("select *",tablas[i],"'")))
dim(dbGetQuery(con, paste0("select * from ",tablas[i],"'")))
dim(dbGetQuery(con, paste0("select * from ",tablas[i])))
for(i in 1:length(tablas)){
print(i)
print(";")
print( tablas[i])
dim(dbGetQuery(con, paste0("select * from ",tablas[i])))
}
i=1
dim(dbGetQuery(con, paste0("select * from ",tablas[i])))
dbGetQuery(con, paste0("select * from ",tablas[i]))
library("RSQLServer")
con <- DBI::dbConnect(RSQLServer::SQLServer(), server = '127.0.0.1', port = '1433', database = 'PREBYA_2017_Balsa', properties = list(user = 'aurora', password = 'aurora123'))
tablas = dbListTables(con)
library("RSQLServer")
con <- DBI::dbConnect(RSQLServer::SQLServer(), server = '127.0.0.1', port = '1433', database = 'PREBYA_2017_Balsa', properties = list(user = 'aurora', password = 'aurora123'))
tablas = dbListTables(con)
tablas = dbListTables(con)
setwd("~/Git_repos/posgradoActual/Melbourne/BMECode/Results")
df = read.table("pmfAures.csv", sep=",")
head(df)
df == "NaN"
df[df == "NaN"]
df[df == "NaN"] = NA
DF
df
df = t(df)
names(df)
df
df = read.table("pmfAures.csv", sep=",")
df[df == "NaN"] = NA
df = data.frame(t(df))
head(df)
names(df) = c("cl", "time", "rmse")
head(df)
?apply
tapply(df$rmse, df$cl, mean)
tapply(df$rmse, df$cl, mean, na.rm=T)
tapply(df$time, df$cl, sum, na.rm=T)
rmsePMF = tapply(df$rmse, df$cl, mean, na.rm=T)
timePMF = tapply(df$time, df$cl, sum, na.rm=T)
plot(rmsePMF)
df <- read.table("fig5.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
head(df)
library("ggplot2")
library("lattice")
library("reshape")
dat.m <- melt(df, measure.vars = c("MAPE","RMSE","CVRMSE", "time"))
levels(dat.m$variable) = c("MAPE (%)", "RMSE", "CVRMSE (%)", "time (s)")
xyplot(value~V1|variable, data = dat.m, layout = c(1,(ncol(df))-1), lwd=2, pch=19, type="b",scales = list(y = list(relation = "free", rot=0), x = list(at= seq(120,1200,120))),
xlab ="# Observations per sensor (fixed nh = 3)", ylab="", main="BME with normalised (per sensor) temp IBRL data")
source('~/Git_repos/posgradoActual/Melbourne/BMECode/Results/fig5.R', echo=TRUE)
plot(df$V1, df$MAPE,ylab ="MAPE (%)", xlab="# Observations per sensor (fixed nh = 3)"
, main="BME with normalised (per sensor) temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = seq(120,1200,120))
with(df, lines(loess.smooth(V1, MAPE),col = "#006600", lwd=2.5))
rmsePMF
rmsePMF
as.numeric(rmsePMF)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters"
, main="PMF with temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters"
, main="PMF with temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters"
, main="PMF with temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
abline(h=1.3)
abline(h=1.3, col="red")
abline(h=1.3, col="red", lwd=2.5)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
abline(h=1.3, col="red", lwd=2.5)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="          # clusters"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
abline(h=1.3, col="red", lwd=2.5)
df <- read.table("fig4MAPE.csv", sep=",", head=F)
df
head(df)
xyplot(value~V1|variable, data = dat.m, layout = c(1,(ncol(df))-1), lwd=2, pch=1, type="b",scales = list(y = list(relation = "free", rot=0), x = list(at= seq(3,53,4))), xlab =" Maximum # hard sensor as neighbors (fixed N = 1200)", ylab="", main="BME with raw temp IBRL data")
df <- read.table("fig2.csv", sep=",", head=F)
df
head(df)
df <- read.table("fig2.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
head(df)
df
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
lines(df$RMSE[1:20])
lines(df$RMSE[1:20], lwd=2.5, col="red")
df = read.table("pmfAures.csv", sep=",")
df[df == "NaN"] = NA
df = data.frame(t(df))
names(df) = c("cl", "time", "rmse")
rmsePMF = tapply(df$rmse, df$cl, mean, na.rm=T)
timePMF = tapply(df$time, df$cl, sum, na.rm=T)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
df <- read.table("fig2.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
points(df$RMSE[1:20], lwd=2.5, col="red")
points(df$RMSE[1:20], pch = 19,lwd=2.5, col="red")
df = read.table("pmfAures.csv", sep=",")
df[df == "NaN"] = NA
df = data.frame(t(df))
names(df) = c("cl", "time", "rmse")
rmsePMF = tapply(df$rmse, df$cl, mean, na.rm=T)
timePMF = tapply(df$time, df$cl, sum, na.rm=T)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
df <- read.table("fig2.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
points(df$RMSE[1:20], pch = 20,lwd=2.5, col="red")
with(df, lines(loess.smooth(1:20, df$RMSE[1:20]),col = "red", lwd=2.5))
df = read.table("pmfAures.csv", sep=",")
df[df == "NaN"] = NA
df = data.frame(t(df))
names(df) = c("cl", "time", "rmse")
rmsePMF = tapply(df$rmse, df$cl, mean, na.rm=T)
timePMF = tapply(df$time, df$cl, sum, na.rm=T)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
df <- read.table("fig2.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
points(df$RMSE[1:20], pch = 20,lwd=1.5, col="red")
with(df, lines(loess.smooth(1:20, df$RMSE[1:20]),col = "red", lwd=2.5))
df = read.table("pmfAures.csv", sep=",")
df[df == "NaN"] = NA
df = data.frame(t(df))
names(df) = c("cl", "time", "rmse")
rmsePMF = tapply(df$rmse, df$cl, mean, na.rm=T)
timePMF = tapply(df$time, df$cl, sum, na.rm=T)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
df <- read.table("fig2.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
points(df$RMSE[1:20], pch = 20,lwd=1, col="red")
with(df, lines(loess.smooth(1:20, df$RMSE[1:20]),col = "red", lwd=2.5))
df = read.table("pmfAures.csv", sep=",")
df[df == "NaN"] = NA
df = data.frame(t(df))
names(df) = c("cl", "time", "rmse")
rmsePMF = tapply(df$rmse, df$cl, mean, na.rm=T)
timePMF = tapply(df$time, df$cl, sum, na.rm=T)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters  # neighbors"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
df <- read.table("fig2.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
points(df$RMSE[1:20], pch = 20,lwd=1, col="red")
with(df, lines(loess.smooth(1:20, df$RMSE[1:20]),col = "red", lwd=2.5))
dev.off()
dev.off()
df = read.table("pmfAures.csv", sep=",")
df[df == "NaN"] = NA
df = data.frame(t(df))
names(df) = c("cl", "time", "rmse")
rmsePMF = tapply(df$rmse, df$cl, mean, na.rm=T)
timePMF = tapply(df$time, df$cl, sum, na.rm=T)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters  # neighbors"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
df2 <- read.table("fig2.csv", sep=",", head=F)
names(df2)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
points(df2$RMSE[1:20], pch = 20,lwd=1, col="red")
with(df2, lines(loess.smooth(1:20, df2$RMSE[1:20]),col = "red", lwd=2.5))
dev.off()
svg(filename="fig7.svg", width = 12, height = 8, pointsize = 12)
plot(1:20, rmsePMF,ylab ="RMSE", xlab="# clusters  # neighbors"
, main="PMF per cluster vs BME temp IBRL data"#, ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
axis(1, at = 1:20)
with(df, lines(loess.smooth(1:20, rmsePMF),col = "#006600", lwd=2.5))
points(df2$RMSE[1:20], pch = 20,lwd=1, col="red")
with(df2, lines(loess.smooth(1:20, df2$RMSE[1:20]),col = "red", lwd=2.5))
dev.off()
df <- read.table("fig8.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
## op1
library("ggplot2")
library("lattice")
library("reshape")
dat.m <- melt(df, measure.vars = c("MAPE","RMSE","CVRMSE", "time"))
levels(dat.m$variable) = c("MAPE (%)", "RMSE", "CVRMSE (%)", "time (s)")
xyplot(value~V1|variable, data = dat.m, layout = c(1,(ncol(df))-1), lwd=2, pch=19, type="b",scales = list(y = list(relation = "free", rot=0), x = list(at= seq(120,1200,120))),
xlab ="# Observations per sensor (fixed nh = 3)", ylab="", main="BME with raw temp IBRL data")
library("ggplot2")
library("lattice")
library("reshape")
dat.m <- melt(df, measure.vars = c("MAPE","RMSE","CVRMSE", "time"))
levels(dat.m$variable) = c("MAPE (%)", "RMSE", "CVRMSE (%)", "time (s)")
plot(df$V1, df$RMSE,ylab ="RMSE", xlab="Percentage of missing values (fixed nh = 3)"
, main="BME with raw temp IBRL data", ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
df <- read.table("fig8.csv", sep=",", head=F)
names(df)[2:5] = c("MAPE", "RMSE", "CVRMSE", "time")
plot(df$V1, df$RMSE,ylab ="RMSE", xlab="Percentage of missing values (fixed nh = 3)"
, main="BME with raw temp IBRL data", ylim = c(3,4.5)
, col="#00994C", pch = 19, xaxt="n")
plot(df$V1, df$RMSE,ylab ="RMSE", xlab="Percentage of missing values (fixed nh = 3)"
, main="BME with raw temp IBRL data", col="#00994C", pch = 19, xaxt="n")
df = df[2:30,]
plot(df$V1, df$RMSE,ylab ="RMSE", xlab="Percentage of missing values (fixed nh = 3)"
, main="BME with raw temp IBRL data", col="#00994C", pch = 19, xaxt="n")
plot(df$V1, df$RMSE,ylab ="RMSE", xlab="Percentage of missing values (fixed nh = 3)"
, main="BME with raw temp IBRL data", col="#00994C", pch = 19)
plot(df$V1, df$RMSE,ylab ="RMSE", xlab="Percentage of missing values (fixed nh = 3)"
, main="BME with raw temp IBRL data", col="#00994C", pch = 19)
with(df, lines(loess.smooth(V1, RMSE),col = "#006600", lwd=2.5))
