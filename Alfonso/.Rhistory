mUt[,,1] = mU@transitionMatrix
mLt[,,1] = mL@transitionMatrix
}
mEt <- array(NA, c(9, 9, 3))
mUt <- array(NA, c(9, 9, 3))
mLt  <- array(NA, c(9, 9, 3))
for(i in 1:3){
print(i)
x = as.numeric(unlist(df[,1]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
mEt[,,1] = mE@transitionMatrix
mUt[,,1] = mU
mLt[,,1] = mL
}
mEt
mEt <- array(NA, c(9, 9, 3))
mUt <- array(NA, c(9, 9, 3))
mLt  <- array(NA, c(9, 9, 3))
for(i in 1:3){
print(i)
x = as.numeric(unlist(df[,1]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
mEt[,,i] = mE@transitionMatrix
mUt[,,i] = mU
mLt[,,i] = mL
}
mEt
mUt
mLt
y
dim(mE)
mE
dim(mE)
for(i in 1:ncol(df)){
x = as.numeric(unlist(df[,1]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
if(dim(mE)!=9){
print(i)
}
}
x = as.numeric(unlist(df[,1]))
for(i in 1:ncol(df)){
x = as.numeric(unlist(df[,i]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
if(dim(mE)!=9){
print(i)
}
}
df
i=1
x = as.numeric(unlist(df[,i]))
df[,i]
df[,1]
df[,..1]
df[,..i]
for(i in 1:ncol(df)){
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
if(dim(mE)!=9){
print(i)
}
}
i=1
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
if(dim(mE)!=9){
print(i)
}
for(i in 1:ncol(df)){
print(i)
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
if(dim(mE)!=9){
print("AHHAHAHA")
}
}
i=21
i=2
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
y
x
y
summary(x)
!is.na(x)
sum(!is.na(x))
for(i in 1:ncol(df)){
print(i)
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
if(sum(!is.na(x))==0){
print("TOOODO NA")
}else{
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
if(dim(mE)!=9){
print("AHHAHAHA")
}
}
}
i=20
print(i)
x = as.numeric(unlist(df[,1]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE
i
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
if(sum(!is.na(x))==0){
print("TOOODO NA")
}else{
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
if(dim(mE)!=9){
print("AHHAHAHA")
}
}
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE
print(i)
x = as.numeric(unlist(df[,1]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE
i
print(i)
x = as.numeric(unlist(df[,i]))
y = fillNAgaps(x, firstBack=T)
print(i)
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE
colnames(df[,..i])
names(df[,..i])
names(mE)
namesOk = as.character(c(20:29))
namesOk
which(mE %in%$ namesOk)
which(mE %in% namesOk)
which(names(mE) %in% namesOk)
which(namesOk %in% names(mE))
namesOk
names(mE)
namesOk = as.character(c(21:29))
which(namesOk %in% names(mE))
'%!in%' <- function(x,y)!('%in%'(x,y))
which( names(mE) !%in%  namesOk)
'%!in%' <- function(x,y)!('%in%'(x,y))
names(mE) !%in%  namesOk
c(1,3,11)%!in%1:10
which( names(mE) %!in%  namesOk)
which(namesOk  %!in%  names(mE))
for(i in 1:ncol(df)){
print(i)
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
if(sum(!is.na(x))==0){
print("TOOODO NA")
}else{
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
if(dim(mE)!=9){
print("AHHAHAHA")
}
}
}
i=42
print(i)
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE
matrix=cbind(a = 1:2, d = 3:4)
matrix
coln=c("a","b","c","d")
colnmatrix=colnames(matrix)
matrix=matrix[,match(coln,colnmatrix)]
colnames(matrix)=coln
matrix
matrix=cbind(a = 1:2, d = 3:4)
coln=c("a","b","c","d")
colnmatrix=colnames(matrix)
colnmatrix
matrix=matrix[,match(coln,colnmatrix)]
matrix
colnames(matrix)=coln
matrix
coln=as.character(c(21:30))
colnmatrix=colnames(matrix)
mE
i=1
print(i)
x = as.numeric(unlist(df[,..i]))
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE
coln=as.character(c(21:30))
colnmatrix=colnames(matrix)
matrix=mE
matrix=matrix[,match(coln,colnmatrix)]
colnames(matrix)=coln
matrix
matrix[is.na(matrix)] <- 0
matrix=mE
coln=as.character(c(21:30))
colnmatrix=colnames(matrix)
matrix=matrix[,match(coln,colnmatrix)]
colnames(matrix)=coln
matrix
matrix[is.na(matrix)] <- 0
mE
matrix=mE
matrix
matrix=mE@transitionMatrix
coln=as.character(c(21:30))
colnmatrix=colnames(matrix)
matrix=matrix[,match(coln,colnmatrix)]
colnames(matrix)=coln
matrix
matrix[is.na(matrix)] <- 0
matrix
match(coln,colnmatrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
matrix=mE@transitionMatrix
coln=as.character(c(21:30))
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
matrix
matrix[is.na(matrix)] <- 0
matrix
matrix=mE@transitionMatrix
coln=as.character(c(21:30))
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix
matrix[is.na(matrix)] <- 0
matrix
length(coln)
dim(mE)
col(mE)
conmales(mE)
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
f.fillMatrixAurora(mE@transitionMatrix, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mU
if(sum(!is.na(x))==0){
print("TOOODO NA")
}
mEt <- array(NA, c(9, 9, 3))
mUt <- array(NA, c(9, 9, 3))
mLt  <- array(NA, c(9, 9, 3))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
for(i in 1:10){
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(dim(mE)!=length(coln)){
print("AHHAHAHA")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
}
mEt <- array(NA, c(9, 9, 10))
mUt <- array(NA, c(9, 9, 10))
mLt  <- array(NA, c(9, 9, 10))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
for(i in 1:10){
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(dim(mE)!=length(coln)){
print("AHHAHAHA")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
}
i=1
print(i)
x = as.numeric(unlist(df[,..i]))
sum(!is.na(x))!=0
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
dim(mE)!=length(coln)
dim(mE)!=length(coln)
dim(mE)
mEt <- array(NA, c(9, 9, 10))
mUt <- array(NA, c(9, 9, 10))
mLt  <- array(NA, c(9, 9, 10))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
for(i in 1:10){
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(ncol(mE)!=length(coln)){
print("Filling")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
}
i=1
print(i)
x = as.numeric(unlist(df[,..i]))
sum(!is.na(x))!=0
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
ncol(mE)!=length(coln)
print("Filling")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
mEt[,,i] = mE
mE
mEt <- array(NA, c(10, 10, 20))
mUt <- array(NA, c(10, 10, 20))
mLt  <- array(NA, c(10, 10, 20))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
for(i in 1:20){
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(ncol(mE)!=length(coln)){
print("Filling")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
}
mEt
library("R.matlab")
?writeMat
writeMat("m.mat",mEt, mUt, mLt)
writeMat("m.mat",mEt)
writeMat("mEt.mat",mEt)
tempfile()
writeMat("mEt.mat",mEt=mEt)
writeMat("m.mat",mEt=mEt, mUt= mUt, mLt = mLt)
getwd()
writeMat("m.mat",mEt=mEt, mUt= mUt, mLt = mLt)
writeMat("mUt.mat",mUt= mUt)
writeMat("mLt.mat",mLt= mLt)
mEt <- array(NA, c(10, 10, ncol(df)))
mUt <- array(NA, c(10, 10, ncol(df)))
mLt  <- array(NA, c(10, 10, ncol(df)))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
for(i in 1:ncol(df)){
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(ncol(mE)!=length(coln)){
print("Filling")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
}
library("R.matlab")
writeMat("mEt.mat",mEt= mEt)
writeMat("mUt.mat",mUt= mUt)
writeMat("mLt.mat",mLt= mLt)
