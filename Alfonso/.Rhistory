install.packages("markovchain")
library("markovchain")
data(rain)
mysequence<-rain$rain
createSequenceMatrix(mysequence)
mysequence
head(rain)
rain
?rain
myFit<-markovchainFit(data=mysequence,confidencelevel = .9,method = "mle")
myFit
alofiMc<-myFit$estimate
alofiMc
alofiMc
a11=alofiMc[1,1]
a12=alofiMc[1,2]
a13=alofiMc[1,3]
a21=alofiMc[2,1]
a22=alofiMc[2,2]
a23=alofiMc[2,3]
a31=alofiMc[3,1]
a32=alofiMc[3,2]
a33=alofiMc[3,3]
stateNames <- c("No Rain","Light Rain","Heavy Rain")
ra <- matrix(c(a11,a12,a13,a21,a22,a23,a31,a32,a33),nrow=3, byrow=TRUE)
View(rain)
ra
dtmcA <- new("markovchain",transitionMatrix=ra, states=c("No Rain","Light Rain","Heavy Rain"), name="MarkovChain A")
dtmcA
plot(dtmcA)
row.names(ra) <- stateNames; colnames(ra) <- stateNames
ra = round(ra,3)
plotmat(ra,pos = c(1,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .4,
self.shifty = -.01,
self.shiftx = .13,
main = "Markov Chain Transition Matrix")
library("diagram")
plotmat(ra,pos = c(1,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .4,
self.shifty = -.01,
self.shiftx = .13,
main = "Markov Chain Transition Matrix")
install.packages("diagram")
library("diagram")
plotmat(ra,pos = c(1,2),
lwd = 1, box.lwd = 2,
cex.txt = 0.8,
box.size = 0.1,
box.type = "circle",
box.prop = 0.5,
box.col = "light blue",
arr.length=.1,
arr.width=.1,
self.cex = .4,
self.shifty = -.01,
self.shiftx = .13,
main = "Markov Chain Transition Matrix")
x1 %*% ra
x1 <- matrix(c(1,0,0),nrow=1, byrow=TRUE)
x1 %*% ra
x1 %*% ra
setwd("~/Dropbox/fernan_aurorax/test/TIMES SERIES")
library(forecast)
library("ggfortify")
rmse <- function(error)
{
sqrt(mean(error^2))
}
mae <- function(error)
{
mean(abs(error))
}
df = read.table("../../databases/TIME-SERIES/datasetDatetime.csv", sep=",", head=T)
trainSize = round(nrow(df)*70/100)
testSize = length((trainSize+1):nrow(df))
train = df[1:trainSize,]
test = df[(trainSize+1):nrow(df),]
V1T = c(NA, df$energy[-length(df$energy)])
V2T = df$stMO12_IMI_radmax
V3T = df$holiday
V4T = c(NA, NA, NA, df$energy[-((length(df$energy)-2):length(df$energy))])
V5T = c(NA, NA, NA, df$stMO12_IMI_radmed[-((length(df$energy)-2):length(df$energy))])
V6T = c(NA, NA, df$pr_feels[-((length(df$energy)-1):length(df$energy))])
V7T = c(NA, NA, df$pr_temp[-((length(df$energy)-1):length(df$energy))])
cbind(V1T,V2T,V3T,V4T,V5T,V6T,V7T)
mtt = train[-c(49,50)]
start_time <- Sys.time()
fit_vars <- auto.arima(train$energy, xreg = mtt)
mtt = train[-c(49,50)]
head(mtt)
test[1:3,-c(49,50)]
setwd("~/Dropbox/fernan_aurorax/test/TIMES SERIES/calculos")
df = read.table("Result-ALL-RF-100_train.txt")
rmse <- function(error)
{
sqrt(mean(error^2))
}
real = df$V2
predicted = df$V3
rmse(real-predicted)  # 7.598711 comprobado OK
rmse(real-predicted)/mean(real)  # 8.3 %
df2 = read.table("../../../databases/TIME-SERIES/datasetDatetime.csv",sep=",", head=T)
df3 = cbind(as.Date(df2$datatime[-c(1,2,3)])[1:3559], df)
names(df3)[1] = c("date")
realD = aggregate(df3$V2, by=list(df3$date), FUN = sum)
predictedD = aggregate(df3$V3, by=list(df3$date), FUN = sum)
rmse(realD$x-predictedD$x)  # 79.5
rmse(realD$x-predictedD$x)/mean(realD$x)  # 3.6%
df = read.table("Result-MOES-RF-MAE-100 _test.txt")
real = df$V2
predicted = df$V3
rmse(real-predicted)  # 5.4comprobado OK
rmse(real-predicted)/mean(real) # 5.8 %
df2 = read.table("../../../databases/TIME-SERIES/datasetDatetime.csv",sep=",", head=T)
df3 = cbind(as.Date(df2$datatime[3563:nrow(df2)]), df)
names(df3)[1] = c("date")
realD = aggregate(df3$V2, by=list(df3$date), FUN = sum)
predictedD = aggregate(df3$V3, by=list(df3$date), FUN = sum)
rmse(realD$x-predictedD$x)  # 607.4
rmse(realD$x-predictedD$x)/mean(realD$x)  # 32%
118.9753+ 119.0344+119.1089
357.1186/3
RMSE 1 step 125.9764
RMSE 2 step 126.0053
RMSE 3 step 126.0404
125.9764 + 126.0053 + 126.0404
378.0221 / 3
1-0.4-0.2-0.3
count=rnbinom(1000,mu=2,size=1)
n=length(count)
hist=hist(count,breaks=seq(-0.5,max(count)+0.5,1),col=8)
theta=c(mu=1)
pois_negLL=function(theta)
{
-sum(dpois(count,theta[1],log=T))
}
fit=optimize(pois_negLL,lower=0,upper=max(count))
fit
lines(seq(0,100),n*dpois(seq(0,100),fit$minimum),lwd=2,type='b',pch=18,col=3)
#Below is an example of distribution fitting to discrete data in R using maximum likelihood approach.
#The example is for discrete data, but the same approach applies to continuous data,
#except you need to change the goodness-of-fit test to one appropriate for such data.
count=rnbinom(1000,mu=2,size=1)
n=length(count)
hist=hist(count,breaks=seq(-0.5,max(count)+0.5,1),col=8)
# POISSON AND NEGATIVE BINOMIAL MODEL FITTING
theta=c(mu=1)
pois_negLL=function(theta)
{
-sum(dpois(count,theta[1],log=T))
}
fit=optimize(pois_negLL,lower=0,upper=max(count))
fit
lines(seq(0,100),n*dpois(seq(0,100),fit$minimum),lwd=2,type='b',pch=18,col=3)
theta2=c(mu=1,k=1)
NB_negLL=function(theta2)
{
-sum(dnbinom(count,mu=theta2[1],size=theta2[2],log=T))
}
fit2=optim(theta2,NB_negLL)
fit2
lines(seq(0,100),n*dnbinom(seq(0,100),mu=fit2$par[1],size=fit2$par[2]),lwd=2,type='b',pch=18,col=4)
legend('topright',c("Poisson","Negative_Binomial"),lwd=2,col=c(3,4))
AIC=rbind(2+2*fit$objective,2*2+2*fit2$value)
dAIC=AIC-min(AIC)
colnames(dAIC)=c('dAIC')
rownames(dAIC)=c('Poisson','Neg Binom')
dAIC
pois_chisq=chisq.test(hist$counts,p=dpois(seq(0,max(hist$mids)),fit$minimum),rescale.p=T)
pois_chisq
NB_chisq=chisq.test(hist$counts,p=dnbinom(seq(0,max(hist$mids)),mu=fit2$par[1],size=fit2$par[2]),rescale.p=T)
NB_chisq
setwd("~/Git_repos/posgradoActual/Alfonso")
library("markovchain")
mEt <- array(NA, c(10, 10, ncol(df)))
mUt <- array(NA, c(10, 10, ncol(df)))
mLt  <- array(NA, c(10, 10, ncol(df)))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
for(i in 1:ncol(df)){
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(ncol(mE)!=length(coln)){
print("Filling")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
}
setwd("~/Git_repos/posgradoActual/Alfonso")
library("markovchain")
mEt <- array(NA, c(10, 10, ncol(df)))
mUt <- array(NA, c(10, 10, ncol(df)))
mLt  <- array(NA, c(10, 10, ncol(df)))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
for(i in 1:ncol(df)){
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(ncol(mE)!=length(coln)){
print("Filling")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
}
library("markovchain")
mEt <- array(NA, c(10, 10, ncol(df)))
mUt <- array(NA, c(10, 10, ncol(df)))
mLt  <- array(NA, c(10, 10, ncol(df)))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
i=1
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(ncol(mE)!=length(coln)){
print("Filling")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
print(i)
x = as.numeric(unlist(df[,..i]))
i
library("markovchain")
library("data.table")
df <- fread("TsetCleanV7.csv", sep=";")
mEt <- array(NA, c(10, 10, ncol(df)))
mUt <- array(NA, c(10, 10, ncol(df)))
mLt  <- array(NA, c(10, 10, ncol(df)))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
for(i in 1:ncol(df)){
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(ncol(mE)!=length(coln)){
print("Filling")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
}
fillNAgaps <- function(x, firstBack=FALSE) {
## NA's in a vector or factor are replaced with last non-NA values
## If firstBack is TRUE, it will fill in leading NA's with the first
## non-NA value. If FALSE, it will not change leading NA's.
# If it's a factor, store the level labels and convert to integer
lvls <- NULL
if (is.factor(x)) {
lvls <- levels(x)
x    <- as.integer(x)
}
goodIdx <- !is.na(x)
# These are the non-NA values from x only
# Add a leading NA or take the first good value, depending on firstBack
if (firstBack)   goodVals <- c(x[goodIdx][1], x[goodIdx])
else             goodVals <- c(NA,            x[goodIdx])
# Fill the indices of the output vector with the indices pulled from
# these offsets of goodVals. Add 1 to avoid indexing to zero.
fillIdx <- cumsum(goodIdx)+1
x <- goodVals[fillIdx]
# If it was originally a factor, convert it back
if (!is.null(lvls)) {
x <- factor(x, levels=seq_along(lvls), labels=lvls)
}
x
}
mEt <- array(NA, c(10, 10, ncol(df)))
mUt <- array(NA, c(10, 10, ncol(df)))
mLt  <- array(NA, c(10, 10, ncol(df)))
'%!in%' <- function(x,y)!('%in%'(x,y))
coln=as.character(c(21:30))
f.fillMatrixAurora = function(matrix,coln, with=0){
colnmatrix=colnames(matrix)
matrix=matrix[match(coln,colnmatrix),match(coln,colnmatrix)]
colnames(matrix)=coln
rownames(matrix) = coln
matrix[is.na(matrix)] <- with
return(matrix)
}
for(i in 1:ncol(df)){
print(i)
x = as.numeric(unlist(df[,..i]))
if(sum(!is.na(x))!=0){
y = fillNAgaps(x, firstBack=T)
weatherFittedMLE <- markovchainFit(data = y, method = "mle", name = "weatherFittedMLE", confidencelevel = 0.95)
mE = weatherFittedMLE$estimate
mE = mE@transitionMatrix
mU = weatherFittedMLE$upperEndpointMatrix
mL = weatherFittedMLE$lowerEndpointMatrix
if(ncol(mE)!=length(coln)){
print("Filling")
mE = f.fillMatrixAurora(mE, coln)
mU = f.fillMatrixAurora(mU, coln, with = -999)
mL = f.fillMatrixAurora(mL, coln, with = -999)
}
mEt[,,i] = mE
mUt[,,i] = mU
mLt[,,i] = mL
}else{
print("TOOODO NA") # se queda con NA
}
}
mEt
str(mEt)
mEt[,,1]
mEt[1,,1]
plot(1:10,mEt[1,,1])
plot(1:10,mEt[1,,1], type="l")
plot(1:10,mEt[2,,1], type="l")
plot(1:10,mEt[3,,1], type="l")
plot(1:10,mEt[4,,1], type="l")
plot(1:10,mEt[5,,1], type="l")
plot(1:10,mEt[6,,1], type="l")
plot(1:10,mEt[7,,1], type="l")
plot(1:10,mEt[8,,1], type="l")
plot(1:10,mEt[9,,1], type="l")
plot(1:10,mEt[1,,1], type="l")
plot(1:10,mEt[2,,1], type="l")
plot(1:10,mEt[3,,1], type="l")
setwd("~/Git_repos/posgradoActual/Alfonso")
install.packages("fitdistrplus")
library("fitdistrplus")
x= mEt[3,,1]
library("fitdistrplus")
fw <- fitdist(groundbeef$serving, "weibull")
fw <- fitdist(x, "weibull")
summary(fw)
fw <- fitdist(x, "weibull")
?fitdist
plotdist(x, histo = TRUE, demp = TRUE)
plot(x)
plotdist(x, histo = TRUE, demp = TRUE)
fw <- fitdist(x, "weibull")
x
fw <- fitdist(x[-c(7:10)], "weibull")
fw <- fitdist(x[-c(1,7:10)], "weibull")
summary(fw)
plot(x[-c(1,7:10)])
x= mEt[3,,1]
x2 = x[-c(1,7:10)]
library("fitdistrplus")
plotdist(x, histo = TRUE, demp = TRUE)
fw <- fitdist(x2, "weibull")
summary(fw)
fg <- fitdist(x2, "gamma")
fln <- fitdist(x2, "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext = plot.legend)
qqcomp(list(fw, fln, fg), legendtext = plot.legend)
cdfcomp(list(fw, fln, fg), legendtext = plot.legend)
ppcomp(list(fw, fln, fg), legendtext = plot.legend)
?denscomp
dev.off()
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext = plot.legend)
summary(fw)
summary(fw)
summary(fg)
summary(fln)
summary(fg)
x= mEt[1,,1]
x2 = x[-c(1,7:10)]
library("fitdistrplus")
plotdist(x, histo = TRUE, demp = TRUE)
fw <- fitdist(x2, "weibull")
fg <- fitdist(x2, "gamma")
fln <- fitdist(x2, "lnorm")
plotdist(x, histo = TRUE, demp = TRUE)
x= mEt[1,,1]
x2 = x
library("fitdistrplus")
plotdist(x, histo = TRUE, demp = TRUE)
fw <- fitdist(x2, "weibull")
x2
fw <- fitdist(x2[-c(7:10)], "weibull")
x2[-c(7:10)]
fw <- fitdist(x2[-c(7:10)], "weibull")
